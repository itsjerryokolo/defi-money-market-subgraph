// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class dmgTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save dmgTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save dmgTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("dmgTransfer", id.toString(), this);
  }

  static load(id: string): dmgTransfer | null {
    return store.get("dmgTransfer", id) as dmgTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mDaiMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mDaiMint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mDaiMint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mDaiMint", id.toString(), this);
  }

  static load(id: string): mDaiMint | null {
    return store.get("mDaiMint", id) as mDaiMint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get minterAddress(): Bytes {
    let value = this.get("minterAddress");
    return value.toBytes();
  }

  set minterAddress(value: Bytes) {
    this.set("minterAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mDaiRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mDaiRedeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mDaiRedeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mDaiRedeem", id.toString(), this);
  }

  static load(id: string): mDaiRedeem | null {
    return store.get("mDaiRedeem", id) as mDaiRedeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get redeemerAddress(): Bytes {
    let value = this.get("redeemerAddress");
    return value.toBytes();
  }

  set redeemerAddress(value: Bytes) {
    this.set("redeemerAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountRedeemed(): BigInt {
    let value = this.get("amountRedeemed");
    return value.toBigInt();
  }

  set amountRedeemed(value: BigInt) {
    this.set("amountRedeemed", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mDaiTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mDaiTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mDaiTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mDaiTransfer", id.toString(), this);
  }

  static load(id: string): mDaiTransfer | null {
    return store.get("mDaiTransfer", id) as mDaiTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDCMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDCMint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDCMint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDCMint", id.toString(), this);
  }

  static load(id: string): mUSDCMint | null {
    return store.get("mUSDCMint", id) as mUSDCMint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get minterAddress(): Bytes {
    let value = this.get("minterAddress");
    return value.toBytes();
  }

  set minterAddress(value: Bytes) {
    this.set("minterAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDCRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDCRedeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDCRedeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDCRedeem", id.toString(), this);
  }

  static load(id: string): mUSDCRedeem | null {
    return store.get("mUSDCRedeem", id) as mUSDCRedeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get redeemerAddress(): Bytes {
    let value = this.get("redeemerAddress");
    return value.toBytes();
  }

  set redeemerAddress(value: Bytes) {
    this.set("redeemerAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountRedeemed(): BigInt {
    let value = this.get("amountRedeemed");
    return value.toBigInt();
  }

  set amountRedeemed(value: BigInt) {
    this.set("amountRedeemed", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDCTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDCTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDCTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDCTransfer", id.toString(), this);
  }

  static load(id: string): mUSDCTransfer | null {
    return store.get("mUSDCTransfer", id) as mUSDCTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mETHMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mETHMint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mETHMint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mETHMint", id.toString(), this);
  }

  static load(id: string): mETHMint | null {
    return store.get("mETHMint", id) as mETHMint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get minterAddress(): Bytes {
    let value = this.get("minterAddress");
    return value.toBytes();
  }

  set minterAddress(value: Bytes) {
    this.set("minterAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mETHRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mETHRedeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mETHRedeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mETHRedeem", id.toString(), this);
  }

  static load(id: string): mETHRedeem | null {
    return store.get("mETHRedeem", id) as mETHRedeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get redeemerAddress(): Bytes {
    let value = this.get("redeemerAddress");
    return value.toBytes();
  }

  set redeemerAddress(value: Bytes) {
    this.set("redeemerAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountRedeemed(): BigInt {
    let value = this.get("amountRedeemed");
    return value.toBigInt();
  }

  set amountRedeemed(value: BigInt) {
    this.set("amountRedeemed", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mETHTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mETHTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mETHTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mETHTransfer", id.toString(), this);
  }

  static load(id: string): mETHTransfer | null {
    return store.get("mETHTransfer", id) as mETHTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDTMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDTMint entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDTMint entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDTMint", id.toString(), this);
  }

  static load(id: string): mUSDTMint | null {
    return store.get("mUSDTMint", id) as mUSDTMint | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get minterAddress(): Bytes {
    let value = this.get("minterAddress");
    return value.toBytes();
  }

  set minterAddress(value: Bytes) {
    this.set("minterAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountMinted(): BigInt {
    let value = this.get("amountMinted");
    return value.toBigInt();
  }

  set amountMinted(value: BigInt) {
    this.set("amountMinted", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDTRedeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDTRedeem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDTRedeem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDTRedeem", id.toString(), this);
  }

  static load(id: string): mUSDTRedeem | null {
    return store.get("mUSDTRedeem", id) as mUSDTRedeem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get redeemerAddress(): Bytes {
    let value = this.get("redeemerAddress");
    return value.toBytes();
  }

  set redeemerAddress(value: Bytes) {
    this.set("redeemerAddress", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    return value.toBytes();
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get amountRedeemed(): BigInt {
    let value = this.get("amountRedeemed");
    return value.toBigInt();
  }

  set amountRedeemed(value: BigInt) {
    this.set("amountRedeemed", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class mUSDTTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save mUSDTTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save mUSDTTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("mUSDTTransfer", id.toString(), this);
  }

  static load(id: string): mUSDTTransfer | null {
    return store.get("mUSDTTransfer", id) as mUSDTTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get transferedFrom(): Bytes {
    let value = this.get("transferedFrom");
    return value.toBytes();
  }

  set transferedFrom(value: Bytes) {
    this.set("transferedFrom", Value.fromBytes(value));
  }

  get transferedTo(): Bytes {
    let value = this.get("transferedTo");
    return value.toBytes();
  }

  set transferedTo(value: Bytes) {
    this.set("transferedTo", Value.fromBytes(value));
  }

  get amountTransfered(): BigInt {
    let value = this.get("amountTransfered");
    return value.toBigInt();
  }

  set amountTransfered(value: BigInt) {
    this.set("amountTransfered", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }

  get transactionBlock(): BigInt {
    let value = this.get("transactionBlock");
    return value.toBigInt();
  }

  set transactionBlock(value: BigInt) {
    this.set("transactionBlock", Value.fromBigInt(value));
  }
}

export class governanceProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save governanceProposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save governanceProposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("governanceProposal", id.toString(), this);
  }

  static load(id: string): governanceProposal | null {
    return store.get("governanceProposal", id) as governanceProposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get proposerAddress(): Bytes {
    let value = this.get("proposerAddress");
    return value.toBytes();
  }

  set proposerAddress(value: Bytes) {
    this.set("proposerAddress", Value.fromBytes(value));
  }

  get proposalDate(): BigInt {
    let value = this.get("proposalDate");
    return value.toBigInt();
  }

  set proposalDate(value: BigInt) {
    this.set("proposalDate", Value.fromBigInt(value));
  }

  get startBlock(): BigInt {
    let value = this.get("startBlock");
    return value.toBigInt();
  }

  set startBlock(value: BigInt) {
    this.set("startBlock", Value.fromBigInt(value));
  }

  get endBlock(): BigInt {
    let value = this.get("endBlock");
    return value.toBigInt();
  }

  set endBlock(value: BigInt) {
    this.set("endBlock", Value.fromBigInt(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get governanceProposalID(): BigInt {
    let value = this.get("governanceProposalID");
    return value.toBigInt();
  }

  set governanceProposalID(value: BigInt) {
    this.set("governanceProposalID", Value.fromBigInt(value));
  }

  get voterAddress(): Bytes {
    let value = this.get("voterAddress");
    return value.toBytes();
  }

  set voterAddress(value: Bytes) {
    this.set("voterAddress", Value.fromBytes(value));
  }

  get support(): boolean {
    let value = this.get("support");
    return value.toBoolean();
  }

  set support(value: boolean) {
    this.set("support", Value.fromBoolean(value));
  }

  get voteAmount(): BigInt {
    let value = this.get("voteAmount");
    return value.toBigInt();
  }

  set voteAmount(value: BigInt) {
    this.set("voteAmount", Value.fromBigInt(value));
  }

  get transactionDate(): BigInt {
    let value = this.get("transactionDate");
    return value.toBigInt();
  }

  set transactionDate(value: BigInt) {
    this.set("transactionDate", Value.fromBigInt(value));
  }
}
