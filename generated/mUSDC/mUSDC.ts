// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeTransfer extends ethereum.Event {
  get params(): FeeTransfer__Params {
    return new FeeTransfer__Params(this);
  }
}

export class FeeTransfer__Params {
  _event: FeeTransfer;

  constructor(event: FeeTransfer) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OffChainRequestValidated extends ethereum.Event {
  get params(): OffChainRequestValidated__Params {
    return new OffChainRequestValidated__Params(this);
  }
}

export class OffChainRequestValidated__Params {
  _event: OffChainRequestValidated;

  constructor(event: OffChainRequestValidated) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TotalSupplyDecreased extends ethereum.Event {
  get params(): TotalSupplyDecreased__Params {
    return new TotalSupplyDecreased__Params(this);
  }
}

export class TotalSupplyDecreased__Params {
  _event: TotalSupplyDecreased;

  constructor(event: TotalSupplyDecreased) {
    this._event = event;
  }

  get oldTotalSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTotalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalSupplyIncreased extends ethereum.Event {
  get params(): TotalSupplyIncreased__Params {
    return new TotalSupplyIncreased__Params(this);
  }
}

export class TotalSupplyIncreased__Params {
  _event: TotalSupplyIncreased;

  constructor(event: TotalSupplyIncreased) {
    this._event = event;
  }

  get oldTotalSupply(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTotalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class mUSDC extends ethereum.SmartContract {
  static bind(address: Address): mUSDC {
    return new mUSDC("mUSDC", address);
  }

  EXCHANGE_RATE_BASE_RATE(): BigInt {
    let result = super.call(
      "EXCHANGE_RATE_BASE_RATE",
      "EXCHANGE_RATE_BASE_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_EXCHANGE_RATE_BASE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "EXCHANGE_RATE_BASE_RATE",
      "EXCHANGE_RATE_BASE_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_TYPE_HASH(): Bytes {
    let result = super.call("MINT_TYPE_HASH", "MINT_TYPE_HASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINT_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MINT_TYPE_HASH",
      "MINT_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPE_HASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REDEEM_TYPE_HASH(): Bytes {
    let result = super.call(
      "REDEEM_TYPE_HASH",
      "REDEEM_TYPE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REDEEM_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REDEEM_TYPE_HASH",
      "REDEEM_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRANSFER_TYPE_HASH(): Bytes {
    let result = super.call(
      "TRANSFER_TYPE_HASH",
      "TRANSFER_TYPE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TRANSFER_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_TYPE_HASH",
      "TRANSFER_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  activeSupply(): BigInt {
    let result = super.call("activeSupply", "activeSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("activeSupply", "activeSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklistable(): Address {
    let result = super.call("blacklistable", "blacklistable():(address)", []);

    return result[0].toAddress();
  }

  try_blacklistable(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "blacklistable",
      "blacklistable():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  depositUnderlying(underlyingAmount: BigInt): boolean {
    let result = super.call(
      "depositUnderlying",
      "depositUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlyingAmount)]
    );

    return result[0].toBoolean();
  }

  try_depositUnderlying(
    underlyingAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositUnderlying",
      "depositUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlyingAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exchangeRateLastUpdatedBlockNumber(): BigInt {
    let result = super.call(
      "exchangeRateLastUpdatedBlockNumber",
      "exchangeRateLastUpdatedBlockNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateLastUpdatedBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateLastUpdatedBlockNumber",
      "exchangeRateLastUpdatedBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exchangeRateLastUpdatedTimestamp(): BigInt {
    let result = super.call(
      "exchangeRateLastUpdatedTimestamp",
      "exchangeRateLastUpdatedTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_exchangeRateLastUpdatedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "exchangeRateLastUpdatedTimestamp",
      "exchangeRateLastUpdatedTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentExchangeRate(): BigInt {
    let result = super.call(
      "getCurrentExchangeRate",
      "getCurrentExchangeRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentExchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentExchangeRate",
      "getCurrentExchangeRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minMintAmount(): BigInt {
    let result = super.call("minMintAmount", "minMintAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMintAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minMintAmount",
      "minMintAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minRedeemAmount(): BigInt {
    let result = super.call(
      "minRedeemAmount",
      "minRedeemAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minRedeemAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRedeemAmount",
      "minRedeemAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(underlyingAmount: BigInt): BigInt {
    let result = super.call("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(underlyingAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(underlyingAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(underlyingAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintFromGaslessRequest(
    owner: Address,
    recipient: Address,
    nonce: BigInt,
    expiry: BigInt,
    underlyingAmount: BigInt,
    feeAmount: BigInt,
    feeRecipient: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "mintFromGaslessRequest",
      "mintFromGaslessRequest(address,address,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(underlyingAmount),
        ethereum.Value.fromUnsignedBigInt(feeAmount),
        ethereum.Value.fromAddress(feeRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintFromGaslessRequest(
    owner: Address,
    recipient: Address,
    nonce: BigInt,
    expiry: BigInt,
    underlyingAmount: BigInt,
    feeAmount: BigInt,
    feeRecipient: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintFromGaslessRequest",
      "mintFromGaslessRequest(address,address,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(underlyingAmount),
        ethereum.Value.fromUnsignedBigInt(feeAmount),
        ethereum.Value.fromAddress(feeRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonceOf(owner: Address): BigInt {
    let result = super.call("nonceOf", "nonceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonceOf", "nonceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pausable(): Address {
    let result = super.call("pausable", "pausable():(address)", []);

    return result[0].toAddress();
  }

  try_pausable(): ethereum.CallResult<Address> {
    let result = super.tryCall("pausable", "pausable():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeem(amount: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemFromGaslessRequest(
    owner: Address,
    recipient: Address,
    nonce: BigInt,
    expiry: BigInt,
    amount: BigInt,
    feeAmount: BigInt,
    feeRecipient: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "redeemFromGaslessRequest",
      "redeemFromGaslessRequest(address,address,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(feeAmount),
        ethereum.Value.fromAddress(feeRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemFromGaslessRequest(
    owner: Address,
    recipient: Address,
    nonce: BigInt,
    expiry: BigInt,
    amount: BigInt,
    feeAmount: BigInt,
    feeRecipient: Address,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemFromGaslessRequest",
      "redeemFromGaslessRequest(address,address,uint256,uint256,uint256,uint256,address,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(nonce),
        ethereum.Value.fromUnsignedBigInt(expiry),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(feeAmount),
        ethereum.Value.fromAddress(feeRecipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawUnderlying(underlyingAmount: BigInt): boolean {
    let result = super.call(
      "withdrawUnderlying",
      "withdrawUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlyingAmount)]
    );

    return result[0].toBoolean();
  }

  try_withdrawUnderlying(
    underlyingAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawUnderlying",
      "withdrawUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(underlyingAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _symbol(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _minMintAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minRedeemAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _controller(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseTotalSupplyCall extends ethereum.Call {
  get inputs(): DecreaseTotalSupplyCall__Inputs {
    return new DecreaseTotalSupplyCall__Inputs(this);
  }

  get outputs(): DecreaseTotalSupplyCall__Outputs {
    return new DecreaseTotalSupplyCall__Outputs(this);
  }
}

export class DecreaseTotalSupplyCall__Inputs {
  _call: DecreaseTotalSupplyCall;

  constructor(call: DecreaseTotalSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecreaseTotalSupplyCall__Outputs {
  _call: DecreaseTotalSupplyCall;

  constructor(call: DecreaseTotalSupplyCall) {
    this._call = call;
  }
}

export class DepositUnderlyingCall extends ethereum.Call {
  get inputs(): DepositUnderlyingCall__Inputs {
    return new DepositUnderlyingCall__Inputs(this);
  }

  get outputs(): DepositUnderlyingCall__Outputs {
    return new DepositUnderlyingCall__Outputs(this);
  }
}

export class DepositUnderlyingCall__Inputs {
  _call: DepositUnderlyingCall;

  constructor(call: DepositUnderlyingCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositUnderlyingCall__Outputs {
  _call: DepositUnderlyingCall;

  constructor(call: DepositUnderlyingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseTotalSupplyCall extends ethereum.Call {
  get inputs(): IncreaseTotalSupplyCall__Inputs {
    return new IncreaseTotalSupplyCall__Inputs(this);
  }

  get outputs(): IncreaseTotalSupplyCall__Outputs {
    return new IncreaseTotalSupplyCall__Outputs(this);
  }
}

export class IncreaseTotalSupplyCall__Inputs {
  _call: IncreaseTotalSupplyCall;

  constructor(call: IncreaseTotalSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseTotalSupplyCall__Outputs {
  _call: IncreaseTotalSupplyCall;

  constructor(call: IncreaseTotalSupplyCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintFromGaslessRequestCall extends ethereum.Call {
  get inputs(): MintFromGaslessRequestCall__Inputs {
    return new MintFromGaslessRequestCall__Inputs(this);
  }

  get outputs(): MintFromGaslessRequestCall__Outputs {
    return new MintFromGaslessRequestCall__Outputs(this);
  }
}

export class MintFromGaslessRequestCall__Inputs {
  _call: MintFromGaslessRequestCall;

  constructor(call: MintFromGaslessRequestCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class MintFromGaslessRequestCall__Outputs {
  _call: MintFromGaslessRequestCall;

  constructor(call: MintFromGaslessRequestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get allowed(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemFromGaslessRequestCall extends ethereum.Call {
  get inputs(): RedeemFromGaslessRequestCall__Inputs {
    return new RedeemFromGaslessRequestCall__Inputs(this);
  }

  get outputs(): RedeemFromGaslessRequestCall__Outputs {
    return new RedeemFromGaslessRequestCall__Outputs(this);
  }
}

export class RedeemFromGaslessRequestCall__Inputs {
  _call: RedeemFromGaslessRequestCall;

  constructor(call: RedeemFromGaslessRequestCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class RedeemFromGaslessRequestCall__Outputs {
  _call: RedeemFromGaslessRequestCall;

  constructor(call: RedeemFromGaslessRequestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromGaslessRequestCall extends ethereum.Call {
  get inputs(): TransferFromGaslessRequestCall__Inputs {
    return new TransferFromGaslessRequestCall__Inputs(this);
  }

  get outputs(): TransferFromGaslessRequestCall__Outputs {
    return new TransferFromGaslessRequestCall__Outputs(this);
  }
}

export class TransferFromGaslessRequestCall__Inputs {
  _call: TransferFromGaslessRequestCall;

  constructor(call: TransferFromGaslessRequestCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get v(): i32 {
    return this._call.inputValues[7].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class TransferFromGaslessRequestCall__Outputs {
  _call: TransferFromGaslessRequestCall;

  constructor(call: TransferFromGaslessRequestCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawUnderlyingCall extends ethereum.Call {
  get inputs(): WithdrawUnderlyingCall__Inputs {
    return new WithdrawUnderlyingCall__Inputs(this);
  }

  get outputs(): WithdrawUnderlyingCall__Outputs {
    return new WithdrawUnderlyingCall__Outputs(this);
  }
}

export class WithdrawUnderlyingCall__Inputs {
  _call: WithdrawUnderlyingCall;

  constructor(call: WithdrawUnderlyingCall) {
    this._call = call;
  }

  get underlyingAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawUnderlyingCall__Outputs {
  _call: WithdrawUnderlyingCall;

  constructor(call: WithdrawUnderlyingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
